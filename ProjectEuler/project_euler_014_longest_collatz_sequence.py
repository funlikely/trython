# The following iterative sequence is defined for the set of positive integers:
#
# n → n/2 (n is even)
# n → 3n + 1 (n is odd)
#
# Using the rule above and starting with 13, we generate the following sequence:
# 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
#
# It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
# Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
#
# Which starting number, under one million, produces the longest chain?
#
# NOTE: Once the chain starts the terms are allowed to go above one million.

collatz_chain = [1] * int(10e8)

print("length of initialized array = " + str(len(collatz_chain)))
collatz_chain[0] = 0

letsa_maximum = 5000


def get_collatz_chain_value(i):
    # base case
    if i == 1:
        return collatz_chain[i]
    # the answer has been calculated, we know because the default value is 1
    if collatz_chain[i] != 1:
        return collatz_chain[i]
    # even case
    if i % 2 == 0:
        collatz_chain[i] = 1 + get_collatz_chain_value(int(i / 2))
        return collatz_chain[i]
    # odd case
    collatz_chain[i] = 1 + get_collatz_chain_value(3 * i + 1)
    return collatz_chain[i]


def engage_in_a_test_run():
    for i in range(2, letsa_maximum):
        if collatz_chain[i] == 1:
            collatz_chain[i] = get_collatz_chain_value(i)
        if i % 100 == 0:
            print("processing i = " + str(i) + ", max(collatz_chain) = " + str(max(collatz_chain)))
    print(collatz_chain[:letsa_maximum])
    print(max(collatz_chain))


# test run
# engage_in_a_test_run()

def get_remaining(number_tracker):
    count = 0
    for i in range(int(10e6)):
        if not number_tracker[i]:
            count += 1
    return count


def get_remaining_numbers(number_tracker):
    remainders = []
    for i in range(int(1e6)):
        if number_tracker[i] is False:
            remainders.append(i)
    return remainders


def produce_collatz_via_tree(n):
    remaining = 1000000
    max_num_to_track = 1e9
    number_tracker = [False] * int(max_num_to_track)
    collatz_tree = [[1]]
    remaining -= 1
    number_tracker[1] = True
    max_depth = 800
    for i in range(1, max_depth):
        collatz_tree.append([])
        for j in range(len(collatz_tree[i - 1])):
            num = collatz_tree[i - 1][j]
            if 2 * num < max_num_to_track and number_tracker[2 * num] is False:
                collatz_tree[i].append(2 * num)
                number_tracker[2 * num] = True
                if 2 * num < 1000000:
                    remaining -= 1
            if num > 4 and (num - 1) % 3 == 0 and (num - 1) % 6 != 0 and number_tracker[int((num - 1) / 3)] is False:
                collatz_tree[i].append(int((num - 1) / 3))
                number_tracker[int((num - 1) / 3)] = True
                if (num - 1) / 3 < 1000000:
                    remaining -= 1
        collatz_tree[i].sort()
        print("i = {0}, count = {1}, remaining = {2}, elements: {3}".format(str(i), str(len(collatz_tree[i])),
            str(remaining),
            str(collatz_tree[i][:100])))
        if i > 4:
            collatz_tree[i-2] = []
    print("remaining numbers: " + str(get_remaining_numbers(number_tracker)))
    return collatz_tree




# for i in range(len(tree)):
#     print(tree[i][:100])


def collatz(input):
    n = input
    chain = str(n)
    count = 1
    maximum = 1
    while n != 1 and count < 2000:
        count += 1
        if n % 2 == 0:
            n = int(n / 2)
        else:
            n = 3 * n + 1
        if n > maximum:
            maximum = n
        chain = chain + ", " + str(n)
    return [input, count, maximum, chain]


# tree = produce_collatz_via_tree(1)

print(collatz(50226564))

print(collatz(77671))

remainders = [77671, 103561, 113383, 116507, 131071, 134379, 138081, 138367, 151177, 155342, 155343, 159487, 161439, 161535, 170075, 171775, 174761, 184489, 191335, 196607, 198079, 201569, 204015, 207122, 207123, 207551, 212649, 213103, 226766, 226767, 229033, 233014, 233015, 239231, 242159, 242303, 245985, 255113, 257663, 258207, 260607, 262142, 262143, 264105, 268758, 268759, 270271, 271807, 276162, 276163, 276734, 276735, 280575, 284137, 287003, 288615, 290151, 290751, 290815, 291067, 294911, 297119, 302354, 302355, 304575, 305377, 306023, 310684, 310685, 310686, 311327, 318974, 318975, 319655, 320127, 322878, 322879, 323070, 323071, 327303, 327451, 340150, 340151, 343550, 343551, 344815, 346951, 349522, 349523, 358345, 358847, 360361, 362409, 363239, 363455, 365511, 368217, 368383, 368978, 368979, 376603, 376831, 378043, 378849, 379503, 382670, 382671, 386495, 387311, 387753, 388089, 388719, 388735, 390911, 392959, 393214, 393215, 396158, 396159, 403138, 403139, 405351, 405407, 407169, 407711, 408030, 408031, 411823, 414244, 414245, 414246, 415102, 415103, 417351, 419839, 420351, 420863, 423679, 425298, 425299, 426206, 426207, 430505, 430761, 431899, 432923, 433855, 435227, 436127, 436223, 436601, 437307, 439111, 442367, 445679, 453532, 453533, 453534, 453535, 455919, 456863, 458066, 458067, 459035, 459559, 459753, 459759, 462601, 466028, 466029, 466030, 466991, 470887, 473727, 476955, 477793, 478462, 478463, 479483, 480191, 480481, 483591, 484318, 484319, 484606, 484607, 485887, 487039, 488167, 489631, 490955, 491177, 491970, 491971, 493039, 498687, 502137, 502441, 504057, 508231, 510226, 510227, 515326, 515327, 516414, 516415, 516891, 517191, 517223, 518313, 520427, 521214, 521215, 522879, 523945, 524284, 524285, 524286, 524287, 525159, 526503, 528210, 528211, 531183, 535419, 536575, 537516, 537517, 537518, 538271, 539419, 540542, 540543, 541467, 542895, 542959, 543614, 543615, 544041, 544543, 544859, 545183, 548267, 549097, 552295, 552324, 552325, 552326, 552331, 552575, 553468, 553469, 553470, 553471, 554223, 555751, 559785, 561150, 561151, 564905, 565247, 566719, 567065, 568274, 568275, 569115, 569255, 571935, 574006, 574007, 574347, 575865, 577230, 577231, 578473, 579327, 579743, 580302, 580303, 580967, 581502, 581503, 581630, 581631, 581883, 582134, 582135, 583079, 583103, 585481, 586367, 588543, 589439, 589822, 589823, 590491, 594238, 594239, 602347, 604708, 604709, 604710, 604713, 606847, 608027, 608111, 609150, 609151, 610754, 610755, 611567, 612046, 612047, 612745, 612967, 616801, 617735, 620971, 621368, 621370, 621372, 621373, 622654, 622655, 623295, 626027, 626331, 627849, 629759, 630527, 631295, 631791, 635519, 637057, 637948, 637949, 637950, 639310, 639311, 640254, 640255, 640641, 643231, 643431, 644283, 644335, 645756, 645757, 645758, 645759, 646140, 646141, 646142, 647849, 649385, 650783, 650889, 652841, 654191, 654335, 654571, 654606, 654607, 654619, 654902, 654903, 655359, 655961, 656415, 657385, 658667, 661663, 663551, 664303, 665067, 665215, 666111, 667375, 668519, 669921, 674031, 677641, 680300, 680301, 680302, 680303, 683879, 684031, 685295, 687100, 687101, 687102, 687871, 688553, 689339, 689630, 689631, 689639, 693902, 693903, 694953, 695067, 698593, 699044, 699045, 699046, 699049, 700487, 704281, 704511, 704623, 706331, 710591, 713575, 715433, 716689, 716690, 716691, 717694, 717695, 719007, 719225, 720287, 720722, 720723, 723945, 724818, 724819, 725387, 726057, 726478, 726479, 726523, 726910, 726911, 728831, 728859, 730559, 731022, 731023, 732129, 732251, 734447, 736393, 736433, 736434, 736435, 736441, 736447, 736766, 736767, 737956, 737957, 737958, 737961, 739559, 741001, 747291, 748031, 748201, 750831, 753206, 753207, 753662, 753663, 755625, 756086, 756087, 757698, 757699, 758511, 759006, 759007, 762347, 763675, 765340, 765341, 765342, 767215, 769641, 770047, 771297, 772990, 772991, 773737, 774622, 774623, 775337, 775506, 775507, 775787, 775835, 776178, 776179, 777435, 777438, 777439, 777470, 777471, 780391, 780641, 780735, 781822, 781823, 781951, 782335, 784319, 785918, 785919, 786428, 786429, 786430, 786431, 787321, 787739, 788583, 789755, 791295, 792316, 792317, 792318, 794623, 796775, 799611, 803129, 803871, 804863, 806047, 806276, 806277, 806278, 806283, 807407, 809129, 810523, 810702, 810703, 810814, 810815, 812201, 813183, 813567, 814338, 814339, 814343, 814439, 815422, 815423, 815871, 816060, 816061, 816062, 816815, 816993, 817289, 817339, 817775, 819967, 822139, 822401, 823646, 823647, 823783, 824187, 827391, 827961, 828443, 828488, 828490, 828492, 828493, 828497, 828863, 829087, 830204, 830205, 830206, 830207, 831335, 833627, 833775, 834702, 834703, 835695, 837799, 839678, 839679, 840702, 840703, 841726, 841727, 844647, 847358, 847359, 847871, 849409, 850079, 850596, 850597, 850598, 851227, 851695, 851967, 852412, 852413, 852414, 853673, 853883, 854191, 856731, 857641, 857903, 859113, 859135, 859719, 861009, 861010, 861011, 861521, 861522, 861523, 863798, 863799, 865846, 865847, 867327, 867710, 867711, 868991, 869615, 870171, 870454, 870455, 871451, 872254, 872255, 872446, 872447, 872761, 872809, 872811, 872815, 872825, 873202, 873203, 874614, 874615, 874619, 874655, 876513, 878222, 878223, 879551, 882217, 882815, 884159, 884734, 884735, 885737, 886207, 886555, 886953, 888475, 889833, 891358, 891359, 892671, 892927, 894399, 894747, 896127, 899563, 900735, 901119, 903521, 906175, 907064, 907066, 907068, 907069, 907070, 907071, 907611, 909291, 910271, 911838, 911839, 912041, 912167, 913726, 913727, 916132, 916133, 916134, 917161, 917351, 917503, 918070, 918071, 919118, 919119, 919451, 919506, 919507, 919518, 919519, 919915, 920559, 922651, 924907, 925202, 925203, 926603, 927003, 927211, 929535, 929563, 930043, 931457, 931999, 932056, 932058, 932060, 932061, 932065, 933982, 933983, 934943, 937599, 937831, 939041, 939497, 940479, 941774, 941775, 942247, 943131, 944127, 944639, 945151, 945435, 945791, 946943, 947454, 947455, 947687, 950271, 951433, 952063, 953279, 953910, 953911, 955585, 955586, 955587, 955591, 956924, 956925, 956926, 957211, 957631, 958966, 958967, 960382, 960383, 960619, 960962, 960963, 963823, 964847, 965147, 966425, 966503, 967182, 967183, 968475, 968636, 968637, 968638, 968639, 968697, 969212, 969213, 969214, 971774, 971775, 974078, 974079, 974697, 975015, 976175, 976334, 976335, 978943, 979262, 979263, 980383, 981287, 981503, 981857, 981910, 981911, 981913, 981921, 981927, 981929, 982354, 982355, 982719, 983039, 983940, 983941, 983942, 983947, 984623, 986078, 986079, 988001, 991935, 992495, 995175, 995327, 996455, 997023, 997374, 997375, 997601, 997823, 999167, 999535]
max_length = 1
max_collatz = 1
for i in remainders:
    result = collatz(i)
    if result[1] > max_length:
        max_length = result[1]
        max_collatz = i
    print(result)
print("Longest collatz sequence goes to " + str(max_collatz) + " with length " + str(max_length))

