import math
# """ <-for multi line string->"""
str = """73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""


sequenceOfDigits = ""

sequenceOfDigits += "73167176531330624919225119674426574742355349194934"
sequenceOfDigits += "96983520312774506326239578318016984801869478851843"
sequenceOfDigits += "85861560789112949495459501737958331952853208805511"
sequenceOfDigits += "12540698747158523863050715693290963295227443043557"
sequenceOfDigits += "66896648950445244523161731856403098711121722383113"
sequenceOfDigits += "62229893423380308135336276614282806444486645238749"
sequenceOfDigits += "30358907296290491560440772390713810515859307960866"
sequenceOfDigits += "70172427121883998797908792274921901699720888093776"
sequenceOfDigits += "65727333001053367881220235421809751254540594752243"
sequenceOfDigits += "52584907711670556013604839586446706324415722155397"
sequenceOfDigits += "53697817977846174064955149290862569321978468622482"
sequenceOfDigits += "83972241375657056057490261407972968652414535100474"
sequenceOfDigits += "82166370484403199890008895243450658541227588666881"
sequenceOfDigits += "16427171479924442928230863465674813919123162824586"
sequenceOfDigits += "17866458359124566529476545682848912883142607690042"
sequenceOfDigits += "24219022671055626321111109370544217506941658960408"
sequenceOfDigits += "07198403850962455444362981230987879927244284909188"
sequenceOfDigits += "84580156166097919133875499200524063689912560717606"
sequenceOfDigits += "05886116467109405077541002256983155200055935729725"
sequenceOfDigits += "71636269561882670428252483600823257530420752963450"

#next line removes line breaks
str = sequenceOfDigits



# creating a list using listcomprehension converting each charater of the string -> str to an int() and putting it into a list,
# so "1234" becomes [1,2,3,4] also defining res[] as an empty list 

mylist, res = [int(x) for x in str], []


# then looping through the list ->mylist[i:i+13] will give you 13 items of the list [0,...,12]
# and math.prod() of those items returns the product of all those items, which then is appened to res[]

for i in range(len(mylist)-12):
    res.append(math.prod(mylist[i:i+13]))


#returns the max value of res[]
print(max(res))

# everything above in just one line (str=""" """ needs to be defined and formated before):
# min() is not necessary but cant be removed... dont ask - would probably be better to use filter or map perhaps with lambda but i havent figured that out yet, any function that returns a single value from a list without increasing it would work tho :)

print(max(min(mylist:=[int(x) for x in str]),max([math.prod(mylist[i:i+13]) for i in range(len(str)-12)])))